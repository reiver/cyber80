package cyber80_palette_test

import (
	"github.com/reiver/cyber80/src/cyber80/palette"
	"github.com/reiver/cyber80/src/cyber80/rgb"

	"testing"
)

func TestTypeRGB(t *testing.T) {

	tests := []struct{
		Value        cyber80_palette.Type
		Expected [16]cyber80_rgb.Type
	}{
		{
			Value:    cyber80_palette.Type{
				0x01,0x23,0x45, // color(0)  = #012345
				0x67,0x89,0xab, // color(1)  = #6789ab
				0xcd,0xef,0x12, // color(2)  = #cdef12
				0x34,0x56,0x78, // color(3)  = #345678
				0x9a,0xbc,0xde, // color(4)  = #9abcde
				0xf0,0xfe,0xdc, // color(5)  = #f0fedc
				0xba,0x98,0x76, // color(6)  = #ba9876
				0x54,0x32,0x10, // color(7)  = #543210

				0x00,0x00,0x00, // color(8)  = #000000
				0xff,0x00,0x00, // color(9)  = #ff0000
				0x00,0xff,0x00, // color(10) = #00ff00
				0x00,0x00,0xff, // color(11) = #0000ff
				0x00,0xff,0xff, // color(12) = #00ffff
				0xff,0x00,0xff, // color(13) = #ff00ff
				0xff,0xff,0x00, // color(14) = #ffff00
				0xff,0xff,0xff, // color(15) = #ffffff
			},
			Expected: [16]cyber80_rgb.Type{
				cyber80_rgb.RGB(0x01,0x23,0x45),
				cyber80_rgb.RGB(0x67,0x89,0xab),
				cyber80_rgb.RGB(0xcd,0xef,0x12),
				cyber80_rgb.RGB(0x34,0x56,0x78),
				cyber80_rgb.RGB(0x9a,0xbc,0xde),
				cyber80_rgb.RGB(0xf0,0xfe,0xdc),
				cyber80_rgb.RGB(0xba,0x98,0x76),
				cyber80_rgb.RGB(0x54,0x32,0x10),

				cyber80_rgb.RGB(0x00,0x00,0x00),
				cyber80_rgb.RGB(0xff,0x00,0x00),
				cyber80_rgb.RGB(0x00,0xff,0x00),
				cyber80_rgb.RGB(0x00,0x00,0xff),
				cyber80_rgb.RGB(0x00,0xff,0xff),
				cyber80_rgb.RGB(0xff,0x00,0xff),
				cyber80_rgb.RGB(0xff,0xff,0x00),
				cyber80_rgb.RGB(0xff,0xff,0xff),
			},
		},



		{
			Value:    cyber80_palette.Type{
				0xfe,0xdc,0xba, // color(0)  = #fedcba
				0xed,0xcb,0xa9, // color(1)  = #edcba9
				0xdc,0xba,0x98, // color(2)  = #dcba98
				0xcb,0xa9,0x87, // color(3)  = #cba987
				0xba,0x98,0x76, // color(4)  = #ba9876
				0xa9,0x87,0x65, // color(5)  = #a98765
				0x98,0x76,0x54, // color(6)  = #987654
				0x87,0x65,0x43, // color(7)  = #876543

				0x76,0x54,0x32, // color(8)  = #765432
				0x65,0x43,0x21, // color(9)  = #654321
				0x54,0x32,0x10, // color(10) = #543210
				0x43,0x21,0x0f, // color(11) = #43210f
				0x32,0x10,0xfe, // color(12) = #3210fe
				0x21,0x0f,0xed, // color(13) = #210fed
				0x10,0xfe,0xdc, // color(14) = #10fedc
				0x0f,0xed,0xcb, // color(15) = #0fedcb
			},
			Expected: [16]cyber80_rgb.Type{
				cyber80_rgb.RGB(0xfe,0xdc,0xba),
				cyber80_rgb.RGB(0xed,0xcb,0xa9),
				cyber80_rgb.RGB(0xdc,0xba,0x98),
				cyber80_rgb.RGB(0xcb,0xa9,0x87),
				cyber80_rgb.RGB(0xba,0x98,0x76),
				cyber80_rgb.RGB(0xa9,0x87,0x65),
				cyber80_rgb.RGB(0x98,0x76,0x54),
				cyber80_rgb.RGB(0x87,0x65,0x43),

				cyber80_rgb.RGB(0x76,0x54,0x32),
				cyber80_rgb.RGB(0x65,0x43,0x21),
				cyber80_rgb.RGB(0x54,0x32,0x10),
				cyber80_rgb.RGB(0x43,0x21,0x0f),
				cyber80_rgb.RGB(0x32,0x10,0xfe),
				cyber80_rgb.RGB(0x21,0x0f,0xed),
				cyber80_rgb.RGB(0x10,0xfe,0xdc),
				cyber80_rgb.RGB(0x0f,0xed,0xcb),
			},
		},
	}

	for testNumber, test := range tests {

		for i:=0; i<16; i++ {

			rgb := test.Value.RGB(i)

			if expected, actual := test.Expected[i], rgb; expected != actual {
				t.Errorf("For test #%d and index #%d, the actual RGB color is not what was expected.", testNumber, i)
				t.Logf("EXPECTED: %#v", expected)
				t.Logf("ACTUAL:   %#v", actual)
				continue
			}

		}

	}
}
